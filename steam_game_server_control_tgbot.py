import asyncio
import json
import subprocess
import requests
import time
from dotenv import load_dotenv, find_dotenv
import os
from dotenv import load_dotenv, find_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from dataclasses import dataclass
from types import SimpleNamespace

# –°—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∞
with open("config.json", "r", encoding="utf-8") as file: 
    config = json.load(file)
WHITELIST = config["allowed_users"]
START_WAITING_TIME = config["start_waiting_time"]
BG_WAITING_TIME = config["bg_waiting_time"]
APP_ID = config['app_id']

# –°—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–æ–≤
load_dotenv(find_dotenv())
API_TOKEN = os.getenv('API_TOKEN')
STEAMAPI = os.getenv('STEAMAPI')

# –§–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
updating_event = asyncio.Event()

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

def run_batch_file(file_path):
    subprocess.Popen(file_path,creationflags=subprocess.CREATE_NEW_CONSOLE)

async def send_message(text, message):
    await message.answer(text)
    print(f'{message.chat.id} = {text}')

def get_data_server_steam_api():
    url = f'https://api.steampowered.com/IGameServersService/GetServerList/v1/?key={STEAMAPI}&filter=addr\81.30.105.180&filter=appid\{APP_ID}'

    response = requests.get(url)
    data = response.json()
    return data

def get_data_game_steamcmd_api():
    url = f'https://api.steamcmd.net/v1/info/{APP_ID}'
    
    response = requests.get(url)
    data = response.json()
    return data

def get_current_game_version(game_data):
    return game_data.get('data', 'error').get(str(APP_ID), 'error').get('_change_number', 'error')


def get_server_game_version():
    return int(config["game_version"])

def modify_config_game_version(version):
    config["game_version"] = version
    with open('config.json', 'w') as file:
        json.dump(config, file, indent=4)

def check_status_update():
    if updating_event.is_set():
        return False
    return True

def check_server_online(server_data=None):
    if server_data is None:
        server_data = get_data_server_steam_api()

    try:
        if "response" in server_data and server_data["response"]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ "response" –µ—Å—Ç—å –∏ –æ–Ω –Ω–µ–ø—É—Å—Ç–æ–π
            return True
    except:
        return False

async def start_server():
      subprocess.Popen(f"start cmd /c {config["start_server"]}", shell=True)

async def update_server():
    updating_event.set() #—Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    update_process = await asyncio.create_subprocess_shell(config["update_server"])
    try:
        await asyncio.wait_for(update_process.wait(), config["start_waiting_time"]) 
        result = True
    except asyncio.TimeoutError:
        update_process.terminate()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è
        result = False
    updating_event.clear() #—Å–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    modify_config_game_version(get_current_game_version(get_data_game_steamcmd_api()))
    await start_server() 
    return result

async def stop_server():
    stop_process = await asyncio.create_subprocess_shell(config["stop_server"])
    try:
        await asyncio.wait_for(stop_process.wait(), config["stop_waiting_time"])
        return True
    except asyncio.TimeoutError:
        stop_process.terminate()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è
        return False

def get_server_players():
    try:
        return get_data_server_steam_api().get('response').get('servers')[0].get('players')
    except:
        return 0

# –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üöÄ–°—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞"), #–∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ –æ–¥–∏–Ω —Ä—è–¥
            KeyboardButton(text="‚õî–°—Ç–æ–ø —Å–µ—Ä–≤–µ—Ä–∞"),
            KeyboardButton(text="üîÑ–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞")
        ],
        [KeyboardButton(text="üëÄ–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞")] #–∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å –æ—Ç–¥–µ–ª—å–Ω–æ
    ],
    resize_keyboard=True
)

@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    if message.chat.id not in WHITELIST:
        await send_message(f" –í–∞—à Telegram üÜî: `{message.chat.id}`\n‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.", message)
        return
    await message.answer("‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ.")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@dp.message(lambda message: message.text == 'üöÄ–°—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞')
async def manual_server_startup(message: types.Message):
    if check_status_update():  
        if not check_server_online():
            await start_server()
        await send_message('–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!', message)
        return
    await send_message('–°–µ—Ä–≤–µ—Ä –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è! –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!', message)


@dp.message(lambda message: message.text == '‚õî–°—Ç–æ–ø —Å–µ—Ä–≤–µ—Ä–∞')
async def manual_server_stop(message: types.Message):
    if check_server_online():
        await send_message('–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...', message)
        result = stop_server()
        if result == False:
            await send_message('‚ùå–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!', message)
            return
    await send_message('–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!', message)

@dp.message(lambda message: message.text == 'üîÑ–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞')
async def manual_server_update(message: types.Message):
    if check_server_online():
        await send_message('–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω! –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä!', message)
        return
    if check_status_update() == False:
        await send_message('–°–µ—Ä–≤–µ—Ä —É–∂–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è! –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è!', message)
        return
    await send_message('–°–µ—Ä–≤–µ—Ä –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è...', message)
    result = update_server()
    if result:
        await send_message('–°–µ—Ä–≤–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω!', message)
        return
    await send_message('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –í–æ–∑–º–æ–∂–Ω–æ —Å–µ—Ä–≤–µ—Ä –µ—â–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è.', message)    

@dp.message(lambda message: message.text == 'üëÄ–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞')
async def get_server_status(message: types.Message):
    server_data = get_data_server_steam_api()
    if check_server_online(server_data):
        message_data = SimpleNamespace(**get_data_server_steam_api().get('response').get('servers')[0])
        await send_message(f'‚úÖ–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!\n–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞: {message_data.name}\n–ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞: {message_data.addr}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤: {message_data.players} / {message_data.max_players}', message)
    elif check_status_update() == False:
         await send_message('üîÑ –°–µ—Ä–≤–µ—Ä –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è...', message)
    else:
        await send_message('‚ùå–°–µ—Ä–≤–µ—Ä —É–ø–∞–ª!', message)

async def update_server_bg():
    while True:
        current_game_version = get_current_game_version(get_data_game_steamcmd_api())
        if get_server_game_version() != current_game_version and get_server_players() == 0:
            result_stop = await stop_server()
            if result_stop:
                print("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ–∫–∏–π –∞–ø–¥–µ–π—Ç —Å–µ—Ä–≤–µ—Ä–∞")
                await update_server()
                print("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ–∫–∏–π –∞–ø–¥–µ–π—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")              
        await asyncio.sleep(BG_WAITING_TIME)

async def main():
    asyncio.create_task(update_server_bg())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())